[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
authors = []
license = { text = "MIT" }
requires-python = ">=3.10.0,<4.0.0"
dependencies = [
    "langchain-core>=1.0.0a8,<2.0.0",
    "langchain-classic>=1.0.0a1,<2.0.0",
    "SQLAlchemy>=1.4.0,<3.0.0",
    "requests>=2.32.5,<3.0.0",
    "PyYAML>=5.3.0,<7.0.0",
    "aiohttp>=3.8.3,<4.0.0",
    "tenacity!=8.4.0,>=8.1.0,<10.0.0",
    "dataclasses-json>=0.6.7,<0.7.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "langsmith>=0.1.125,<1.0.0",
    "httpx-sse>=0.4.0,<1.0.0",
    "numpy>=1.26.2; python_version<'3.13'",
    "numpy>=2.1.0; python_version>='3.13'",
]
name = "langchain-community"
version = "1.0.0a1"
description = "Community contributed LangChain integrations."
readme = "README.md"

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-community/tree/main/libs/community"
"Release Notes" = "https://github.com/langchain-ai/langchain/releases?q=tag%3A%22langchain-community%3D%3D0%22&expanded=true"
repository = "https://github.com/langchain-ai/langchain-community"

[dependency-groups]
test = [
    "pytest>=8.4.1,<9.0.0",
    "pytest-cov>=6.2.1,<7.0.0",
    "pytest-dotenv>=0.5.2,<1.0.0",
    "duckdb-engine>=0.13.6,<1.0.0",
    "pytest-watcher>=0.4.3,<1.0.0",
    "freezegun>=1.2.2,<2.0.0",
    "responses>=0.22.0,<1.0.0",
    "pytest-asyncio>=0.20.3,<1.0.0",
    "lark>=1.1.5,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "pytest-socket>=0.6.0,<1.0.0",
    "syrupy>=4.0.2,<5.0.0",
    "requests-mock>=1.11.0,<2.0.0",
    "pytest-xdist>=3.6.1,<4.0.0",
    "blockbuster>=1.5.18,<1.6.0",
    "cffi<1.17.1; python_version < \"3.10\"",
    "cffi; python_version >= \"3.10\"",
    "langchain-tests>=1.0.0a2,<2.0.0",
    "toml>=0.10.2,<1.0.0",
]
test_integration = ["vcrpy>=6.0.0"]
lint = [
    "ruff>=0.13.1,<1.0.0",
    "cffi<1.17.1; python_version < \"3.10\"",
    "cffi; python_version >= \"3.10\"",
]
dev = ["jupyter>=1.0.0,<2.0.0", "setuptools>=67.6.1,<68.0.0", "langchain-core"]
typing = [
    "mypy>=1.17.1,<2.0.0",
    "types-pyyaml>=6.0.12.2,<7.0.0.0",
    "types-requests>=2.28.11.5,<3.0.0.0",
    "types-toml>=0.10.8.1,<1.0.0.0",
    "types-pytz>=2023.3.0.0,<2024.0.0.0",
    "types-chardet>=5.0.4.6,<6.0.0.0",
    "types-redis>=4.3.21.6,<5.0.0.0",
    "mypy-protobuf>=3.0.0,<4.0.0",
    "langchain-core",
    "langchain-text-splitters>=1.0.0a1,<2.0.0",
    "langchain",
]

[tool.ruff]
exclude = [
    "tests/examples/non-utf8-encoding.py",
    "tests/integration_tests/examples/non-utf8-encoding.py",
]

[tool.mypy]
ignore_missing_imports = "True"
disallow_untyped_defs = "True"
warn_unused_ignores = "True"

[tool.codespell]
skip = ".git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,example_data,_dist,examples,*.trig"
ignore-regex = ".*(Stati Uniti|Tense=Pres).*"
ignore-words-list = "momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure,damon,crate,aadd,symbl,precesses,accademia,nin,cann"

[tool.ruff.lint]
select = ["E", "F", "I", "PGH003", "T201"]

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5 --snapshot-warn-unused -vv"
markers = [
    "requires: mark tests as requiring a specific library",
    "scheduled: mark tests to run in scheduled testing",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::langchain_core._api.beta_decorator.LangChainBetaWarning",
    "ignore::langchain_core._api.deprecation.LangChainDeprecationWarning:test",
    "ignore::langchain_core._api.deprecation.LangChainPendingDeprecationWarning:test",
]
